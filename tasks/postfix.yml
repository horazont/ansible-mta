---
- name: "postfix: install packages via apt"
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
  - postfix
  - postfix-ldap
  - postfix-pcre
  tags:
  - apt
  notify:
  - restart postfix

- name: "postfix: deploy privacy header checks"
  template:
    src: postfix/privacy_header_checks.pcre
    dest: /etc/postfix/
  when: mta_msa_privacy
  tags:
  - postfix
  notify:
  - reload postfix

- name: "postfix: instanciate config files"
  template:
    dest: "/etc/postfix/{{ item }}"
    src: "postfix/{{ item }}"
  with_items:
  - master.cf
  - main.cf
  tags:
  - postfix
  - psotfix-spf
  notify:
  - reload postfix

- name: "postfix: create map directory"
  file:
    state: directory
    path: /etc/postfix/maps/
    owner: postfix
    group: postfix
    mode: ug=rwx,o-rwx
  register: map_infrastructure
  tags:
  - postfix-map
  - postfix-map-hash
  - postfix-map-ldap

- name: "postfix: hack to ensure that aliases.db can be written by postfix"
  command: chown postfix:postfix /etc/aliases.db
  failed_when: False
  tags:
  - postfix-map
  - postfix-map-hash

- name: "postfix: build hashes"
  include: postfix-build-hashes.yml
  tags:
  - postfix-map
  - postfix-map-hash

- name: "postfix: build rfc address tables"
  include: postfix-build-rfc-address-tables.yml
  tags:
  - postfix-map
  - postfix-map-hash
  - postfix-map-rfc

- name: "postfix: build ldap configurations"
  include: postfix-build-ldap-configs.yml
  tags:
  - postfix-map
  - postfix-map-ldap

- name: "postfix: deploy sasl password map for relaying"
  template:
    src: postfix/password_map
    dest: "{{ mta_relayhost_auth.mapfile }}"
  when: mta_relayhost and mta_relayhost_auth
  register: password_map
  notify:
  - reload postfix

- name: "postfix: compile sasl password map for relaying"
  command: postmap "{{ mta_relayhost_auth.mapfile }}"
  when: password_map is changed
  notify:
  - reload postfix

- name: "postfix: upload MTA certificate"
  copy:
    content: "{{ mta_tls_cert }}"
    dest: /etc/postfix/mta.crt
    owner: root
    group: root
    mode: ugo=r
  when: mta_listen and mta_tls
  notify:
  - reload postfix
  tags:
  - certificate

- name: "postfix: upload MTA key"
  copy:
    content: "{{ mta_tls_key }}"
    dest: /etc/postfix/mta.key
    owner: root
    group: root
    mode: u=r,go-rwx
  when: mta_listen and mta_tls
  notify:
  - reload postfix
  tags:
  - certificate
  - requires-secrets

- name: "postfix: upload MSA certificate"
  copy:
    content: "{{ mta_msa_tls_cert }}"
    dest: /etc/postfix/msa.crt
    owner: root
    group: root
    mode: u=r,go-rwx
  when: "{{ mta_msa and mta_msa_tls and not mta_msa_tls_cert_file }}"
  notify:
  - reload postfix
  tags:
  - certificate

- name: "postfix: link MSA certificate"
  file:
    state: link
    src: "{{ mta_msa_tls_cert_file }}"
    dest: /etc/postfix/msa.crt
    force: yes
    owner: root
    group: root
    mode: u=r,go-rwx
  when: "{{ mta_msa and mta_msa_tls and not not mta_msa_tls_cert_file }}"
  notify:
  - reload postfix
  tags:
  - certificate

- name: "postfix: upload MSA key"
  copy:
    content: "{{ mta_msa_tls_key }}"
    dest: /etc/postfix/msa.key
    owner: root
    group: root
    mode: u=r,go-rwx
  when: "{{ mta_msa and mta_msa_tls and not mta_msa_tls_key_file }}"
  notify:
  - reload postfix
  tags:
  - certificate
  - requires-secrets

- name: "postfix: link MSA key"
  file:
    state: link
    src: "{{ mta_msa_tls_key_file }}"
    dest: /etc/postfix/msa.key
    force: yes
    owner: root
    group: root
    mode: u=r,go-rwx
  when: "{{ mta_msa and mta_msa_tls and not not mta_msa_tls_key_file }}"
  notify:
  - reload postfix
  tags:
  - certificate

- include: postfix-spf-policyd.yml
  when: mta_spf
  tags:
  - postfix
  - postfix-spf

- include: postfix-ferm.yml
  when: "ferm | default(False)"
  tags:
  - ferm

- include: postfix-nft.yml
  when: "nft | default(False)"
  tags:
  - nft

- name: "postfix: start and enable postfix"
  service:
    name: postfix
    state: started
    enabled: yes

- name: "postfix: upload collectd scripts"
  copy:
    src: queuesize.sh
    dest: /usr/local/bin/
    mode: ugo=rx
